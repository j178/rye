{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Rye: An Experimental Package Management Solution for Python","text":"<p>Rye is Armin's personal one-stop-shop for all his Python needs. It installs and manages Python installations, manages pyproject.toml files, installs and uninstalls dependencies, manages virtualenvs behind the scenes. It supports monorepos and global tool installations.</p> <p>Note</p> <p><code>rye</code> is in an experimental state.</p>"},{"location":"#screencast","title":"Screencast","text":"<p>Click on the thumbnail to watch a 9 minute introduction video</p>"},{"location":"#contents","title":"Contents","text":"<ul> <li>FAQ</li> <li>Commands</li> <li>User Guide</li> </ul>"},{"location":"commands/","title":"Commands","text":""},{"location":"commands/#cli","title":"CLI","text":"Name Description <code>add</code> Add a Python package to the project <code>build</code> Build a package for distribution <code>fetch</code> Fetch a Python interpreter <code>install</code> Install a Python package as a global tool <code>lock</code> Update the lockfile without installing dependencies <code>make-req</code> Build and print a PEP 508 requirement string from parts <code>pin</code> Pin a Python version to the project <code>remove</code> Remove a Python package from the project <code>run</code> Run a command installed to the project <code>shell</code> Spawns a shell with the virtualenv activated <code>sync</code> Updates the virtualenv based on the pyproject.toml <code>toolchain</code> Helper utility to manage Python toolchains <code>self</code> Rye self management"},{"location":"faq/","title":"FAQ","text":"<p>Note</p> <p><code>rye</code> is in an experimental state.</p>"},{"location":"faq/#contents","title":"Contents","text":"<ul> <li>How do I uninstall <code>rye</code>?</li> </ul>"},{"location":"faq/#how-do-i-uninstall-rye","title":"How do I uninstall <code>rye</code>?","text":"<p>You can run <code>cargo uninstall rye</code> if you've installed it with cargo.</p> <p>If you no longer want anything to do with <code>rye</code>, all you need to delete is the <code>~/.rye</code> folder. Everything that it has downloaded / created is placed in there.</p>"},{"location":"guide/","title":"User Guide","text":"<p>Note</p> <p><code>rye</code> is in an experimental state.</p>"},{"location":"guide/#contents","title":"Contents","text":"<p>You can find a demo of <code>rye</code> here.</p> <ul> <li>Getting started</li> <li>Manage your Python toolchain</li> <li>Start a project</li> <li>Change your current Python version</li> <li>Add a dependency to your project</li> <li>Sync your Python environment with your project</li> <li>Remove a dependency from your project</li> <li>Run a script</li> <li>Install a global tool</li> <li>Manage Rye</li> </ul> <p>See commands for more.</p>"},{"location":"guide/#getting-started","title":"Getting started","text":""},{"location":"guide/#installation","title":"Installation","text":"<p>Rye is built in Rust. There is no binary distribution yet, it only works on Linux and macOS as of today:</p> <pre><code>cargo install --git https://github.com/mitsuhiko/rye rye\n</code></pre>"},{"location":"guide/#manage-your-python-toolchain","title":"Manage your Python toolchain","text":"<p>Use the <code>toolchain</code> command to use <code>rye</code> to manage your Python toolchain.</p> <p><pre><code>rye toolchain list --include-downloadable\n</code></pre> <pre><code>cpython@3.11.1\ncpython@3.10.9\ncpython@3.9.16\ncpython@3.10.8 (downloadable)\ncpython@3.10.7 (downloadable)\n...\n</code></pre></p> <p>We'll download <code>cpython3.10.8</code> for a new project.</p> <p><pre><code>rye toolchain fetch 3.10.8\n</code></pre> <pre><code>Downloading cpython@3.10.8\nsuccess: Downloaded cpython@3.10.8\n</code></pre></p> <p><code>rye</code> uses python-build-standalone. This means <code>rye</code> manages your project's Python environment with a standalone toolchain by downloading the builds for your system.</p> <p>Tip</p> <p>You can register custom Python toolchains with <code>rye toolchain register</code>.</p> <pre><code>rye toolchain register ~/Downloads/pypy3.9-v7.3.11-macos_arm64/bin/python\n</code></pre>"},{"location":"guide/#start-a-project","title":"Start a project","text":"<p>Use the <code>init</code> command to initialize a project.</p> <pre><code>mkdir getting-started\ncd getting-started\nrye init\n</code></pre> <p>This command will bootstrap your directory as a Python project compatible with <code>rye</code>.</p> <pre><code>tree -a .\n.\n\u251c\u2500\u2500 .git\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 pyproject.toml\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 getting_started\n        \u2514\u2500\u2500 __init__.py\n</code></pre> <p>A <code>pyproject.toml</code> is used to store metadata about your project as well as some <code>rye</code> configuration. Most of <code>rye</code>'s commands will require a <code>pyproject.toml</code> to work.</p>"},{"location":"guide/#change-your-current-python-version","title":"Change your current Python version","text":"<p>The <code>pin</code> command is used to pin the current version of Python <code>rye</code> uses for the workspace. Use it to pin the newly downloaded <code>cpython@3.10.8</code> to the project.</p> <pre><code>rye pin 3.10.8\n</code></pre> <p><code>rye</code> can be used to manage your project, its <code>pyproject.toml</code>, and its environment.</p> <pre><code>tree -a .\n.\n\u251c\u2500\u2500 .git\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 .python-version\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 pyproject.toml\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 getting_started\n        \u2514\u2500\u2500 __init__.py\n</code></pre>"},{"location":"guide/#add-a-dependency","title":"Add a dependency","text":"<p>Use the <code>add</code> command to add dependencies to your project.</p> <pre><code>rye add \"flask&gt;=2.0\"\nrye add --dev black\n</code></pre> <p>Tip</p> <p>You can install dependencies from other sources as well.</p> <pre><code>rye add package-name --git=ssh://git@git.example.com/MyProject\n</code></pre>"},{"location":"guide/#sync-your-python-environment","title":"Sync your Python environment","text":"<p><code>rye</code> will sync your environment with the <code>sync</code> command.</p> <pre><code>rye sync\n</code></pre> <p>When <code>rye sync</code> is run in a workspace all packages are installed together. This also means that they can inter-depend as they will all be installed editable by default.</p> <pre><code>tree -a .\n.\n\u251c\u2500\u2500 .git\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 .python-version\n\u251c\u2500\u2500 .venv\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 requirements-dev.lock\n\u251c\u2500\u2500 requirements.lock\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 getting_started\n        \u2514\u2500\u2500 __init__.py\n</code></pre>"},{"location":"guide/#remove-a-dependency","title":"Remove a dependency","text":"<p>Use the <code>remove</code> command to remove a dependency from the project.</p> <pre><code>rye remove flask\nrye sync\n</code></pre>"},{"location":"guide/#run-a-script","title":"Run a script","text":"<p><code>rye run</code> can be used to invoke a binary from the virtualenv or a configured script. <code>rye</code> allows you to define basic scripts in the <code>pyproject.toml</code> in the <code>tool.rye.scripts</code> section:</p> <pre><code>[tool.rye.scripts]\nserve = \"python -m http.server 8000\"\n</code></pre>"},{"location":"guide/#install-a-global-tool","title":"Install a global tool","text":"<p>If you want tools to be installed into isolated virtualenvs (like <code>pipsi</code> and <code>pipx</code>), you can use <code>rye</code> (requires <code>~/.rye/shims</code> to be on the path):</p> <p><pre><code>rye install pycowsay\npycowsay Wow\n</code></pre> <pre><code>  ---\n&lt; Wow &gt;\n  ---\n   \\   ^__^\n    \\  (oo)\\_______\n       (__)\\       )\\/\\\n           ||----w |\n           ||     ||\n</code></pre></p> <p>Alternatively, use <code>rye run &lt;script&gt;</code> to run a script (installed into <code>.venv/bin</code>) in the context of the virtual environment. This for instance can be used to run black:</p> <pre><code>rye add --dev black\nrye sync\nrye run black .\n</code></pre> <p>To have multiple projects share the same virtualenv, it's possible to declare workspaces in the <code>pyproject.toml</code>:</p> <pre><code>[tool.rye.workspace]\nmembers = [\"foo-*\"]\n</code></pre>"},{"location":"guide/#manage-rye","title":"Manage Rye","text":"<p>Update <code>rye</code> using the <code>self</code> command.</p> <pre><code>rye self update\n</code></pre>"},{"location":"guide/#feedback","title":"Feedback","text":"<p>Submit an issue here.</p>"}]}